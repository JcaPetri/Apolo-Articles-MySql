-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the ArtDataElementComments_Tbl table
/*Contains one or more descriptions/comments/details/explains of each record of the diccionary.
It has a defined language, an order when there is more than one description, a type of text format (mimetype), a status and the date of the last update.
If the element has not been recorded in this table, it means the element has not clarifications.
The key for each record:
  ID		--> is the uniqueidentifier auto generated.
  IDNum	--> is the autoincrement number auto generated.
The unique Key is the union of:
    This table have not unique key because one IDNum can have none, one or more comments.
Common Field/Columns for all tables
  The objective of these are to store critical information for the system and the record history.
    StatedIDn 			--> The StatedIDn is the IDNum that define if the record is enable or not.
    CreatedByIDn		--> The CreatedByIDn is the IDNum of the user who created the record.
    LastModifiedByIDn	--> The LastModifiedByIDn is the IDNum of the last user who modified the record.
    OwnerIDn			--> The OwnerIDn is the IDNum of the record owner.
    DateCreated			--> The DateCreated is the record creation datetime UTC.
    DateTimeStamp		--> The DateTimeStamp is the datetime UTC of the last modification.
    TableHistory		-->	The TableHistory contain then change history of each column.			
Tips:
  The ScopeIDn + BusinessUnitIDn + TableIDn combination can be the Kafka/rabbitMq topic.
*/

-- #########################################################################################################################################################################################
-- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Delete the table ArtDataElementComments_Tbl if Exits, but first you must to altere the tables that have a referenced foreign key
USE articlesdb;
-- First you must to delete the Foreing Key Constraint;
-- The referenced ArtDataElementComments_Tbl Tables:
-- ALTER TABLE `articlesdb`.`SysMicroservices_Tbl`  DROP FOREIGN KEY `MicroserviceIDn_Rel`;

-- After deleted the referenced, you can delete the table
DROP TABLE IF EXISTS `articlesdb`.`ArtDataElementComments_Tbl`;

CREATE TABLE `ArtDataElementComments_Tbl` (
	  `IDNum` int NOT NULL AUTO_INCREMENT COMMENT 'The IDNum is the autoincrement number', 
	  `ID` char(38) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The ID is the uniqueidentifier auto generated V4', 
      `DataElementCommentIDn` int NOT NULL COMMENT 'The DataElementCommentIDn is the IDNum of the ArtDataElements_Tbl element, which have the comments.',
	  `LanguageIDn` int NOT NULL COMMENT 'The LanguageIDn is the IdNum of the language in which the comment is defined.',
      `CommentOrder` tinyint NOT NULL COMMENT 'The order of the comments.',
	  `TextFormatIDn` int NOT NULL COMMENT 'The TextFormatIDn is the IdNum of the format text in which the comment is defined.',
	  `Comment` text CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'Real comment written by the user.',
      `ScopeIDn` int NOT NULL COMMENT 'The ScopeIDn is the IdNum of the Scope. It inherited from ArtDataElements_Tbl.',
	  `BusinessUnitIDn` int NOT NULL COMMENT 'The BusinessUnitIDn is the IdNum of the BusinessUnit. It inherited from ArtDataElements_Tbl.',
      `StateIDn` smallint NOT NULL COMMENT 'The StatedIDn define if the record is enable or not.',
	  `CreatedByIDn` int NOT NULL COMMENT 'The CreatedByIDn is the IdNum of the user who created the record.',
	  `LastModifiedByIDn` int NOT NULL COMMENT 'The LastModifiedByIDn is the IdNum of the last user who modified the record.',
	  `OwnerIDn` int NOT NULL COMMENT 'The OwnerIDn is the IdNum of the record owner.',
	  `DateCreated` datetime NOT NULL COMMENT 'The DateCreated is the record creation date with UTC.',
	  `DateTimeStamp` timestamp NOT NULL COMMENT 'The DateTimeStamp is the date of the last modification of the record with UTC.',
 	  `TzNameIDn` smallint NOT NULL COMMENT 'The IDNum of the TimeZone',				
	  `TzOffset` smallint NOT NULL COMMENT 'The diferences between ZeroTimeZone and the TimeZone where the record is created or updated.',					
	  `TableHistory` text CHARACTER SET utf8mb4 COLLATE utf8mb4_bin COMMENT 'The TableHistory contain then change history of each column.',
	  PRIMARY KEY `ID_AdcPriKey` (`IDNum`) COMMENT 'The sequence ArtDataElementComments_Tbl_seq generate the nextval',
	  UNIQUE KEY `ID_AdcUnique` (`ID`) /*!80000 INVISIBLE */ COMMENT 'Is the uniqueidentifier.',
	  UNIQUE KEY `IDNum_AdcUnique` (`IDNum`) COMMENT 'The IDNum must be unique.',
	  KEY `ID_AdcIdx` (`ID`) /*!80000 INVISIBLE */ COMMENT 'The ID alway must be indexed.',
	  KEY `IDNum_AdcIdx` (`IDNum`) /*!80000 INVISIBLE */ COMMENT 'The IDNum must always be indexed.',
	  CONSTRAINT `DataElementCommentIDn_AdcRel` FOREIGN KEY (`DataElementCommentIDn`) REFERENCES `articlesdb`.`ArtDataElements_Tbl` (`IDNum`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB 
	AUTO_INCREMENT=0 
	DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin 
	COMMENT='Contains one or more descriptions/comments/details/explains of each record of the diccionary.
It has a defined language, an order when there is more than one description, a type of text format (mimetype), a status and the date of the last update.
If the element has not been recorded in this table, it means the element has not clarifications.
The key for each record:
  ID		--> is the uniqueidentifier auto generated.
  IDNum	--> is the autoincrement number auto generated.
The unique Key is the union of:
    This table have not unique key because one IDNum can have none, one or more comments.
Common Field/Columns for all tables
  The objective of these are to store critical information for the system and the record history.
    StatedIDn 			--> The StatedIDn is the IDNum that define if the record is enable or not.
    CreatedByIDn		--> The CreatedByIDn is the IDNum of the user who created the record.
    LastModifiedByIDn	--> The LastModifiedByIDn is the IDNum of the last user who modified the record.
    OwnerIDn			--> The OwnerIDn is the IDNum of the record owner.
    DateCreated			--> The DateCreated is the record creation datetime UTC.
    DateTimeStamp		--> The DateTimeStamp is the datetime UTC of the last modification.
    TableHistory		-->	The TableHistory contain then change history of each column.			
Tips:
  The ScopeIDn + BusinessUnitIDn + TableIDn combination can be the Kafka/rabbitMq topic.';

-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Insert - ArtDataElementComments_Tbl
USE articlesdb;
DROP TRIGGER IF EXISTS `articlesdb`.`ArtDataElementCommentsBeforeInsert_Trg`;
DELIMITER $$
USE `articlesdb`$$
-- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `ArtDataElementCommentsBeforeInsert_Trg` BEFORE INSERT ON `ArtDataElementComments_Tbl` FOR EACH ROW BEGIN
	-- In the case, which the request do not give this value, MySql created it.
	-- Set the ID uniqueidentifier, IDCode, DateCreated and DateTimeStamp
	IF new.ID IS NULL OR new.ID = '' THEN
		SET new.ID = uuid();				-- Set the UniqueIdentifier Value
	END IF;
	SET new.ScopeIDn = (SELECT ScopeIDn FROM `articlesdb`.`ArtDataElements_Tbl` WHERE IDNum = new.DataElementCommentIDn LIMIT 1);
	SET new.BusinessUnitIDn = (SELECT BusinessUnitIDn FROM `articlesdb`.`ArtDataElements_Tbl` WHERE IDNum = new.DataElementCommentIDn LIMIT 1);
	SET new.DateCreated = ifnull(new.DateCreated,CURRENT_TIMESTAMP);
	SET new.DateTimeStamp = ifnull(new.DateTimeStamp,CURRENT_TIMESTAMP);
END$$
DELIMITER ;

-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Update - ArtDataElementComments_Tbl
-- en caso que desde Java no pasen la informacion de estos campos,
-- establece el valor del DateTimeStamp, TableHistory creando el historico de cada registro
USE articlesdb;
DROP TRIGGER IF EXISTS `articlesdb`.`ArtDataElementCommentsBeforeUpdate_Trg`;
DELIMITER $$
USE `articlesdb`$$
-- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `ArtDataElementCommentsBeforeUpdate_Trg` BEFORE UPDATE ON `ArtDataElementComments_Tbl` FOR EACH ROW BEGIN
	DECLARE v_TableHistory text;
	DECLARE v_TableHistoryOld text;
	SET new.DateTimeStamp = ifnull(new.DateTimeStamp,CURRENT_TIMESTAMP);
    IF new.TableHistory = 'SetNull' THEN
		SET new.TableHistory = null;
    ELSEIF new.TableHistory = 'SetOff' THEN
		SET new.TableHistory = old.TableHistory;
    ELSE
		-- When the (New) value is equal the (Old), you set an empty update, because the value is steal in the record.
		-- When the (New) value is diferent with the (Old), you set the old value in the update. The new value is in the record.
		SET v_TableHistoryOld := old.TableHistory;
		SET v_TableHistory = '';
		-- IDNum, this value never changes.
		-- ID, this value never changes.
		IF NEW.DataElementCommentIDn <> OLD.DataElementCommentIDn THEN SET v_TableHistory := OLD.DataElementCommentIDn; ELSE SET v_TableHistory := '†'; END IF;
        IF NEW.LanguageIDn <> OLD.LanguageIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.LanguageIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
        IF NEW.CommentOrder <> OLD.CommentOrder THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.CommentOrder); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
        IF NEW.TextFormatIDn <> OLD.TextFormatIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.TextFormatIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
        IF NEW.Comment <> OLD.Comment THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.Comment); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
        IF NEW.ScopeIDn <> OLD.ScopeIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.ScopeIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
        IF NEW.BusinessUnitIDn <> OLD.BusinessUnitIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.BusinessUnitIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
        IF NEW.StateIDn <> OLD.StateIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.StateIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.CreatedByIDn <> OLD.CreatedByIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.CreatedByIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.LastModifiedByIDn <> OLD.LastModifiedByIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.LastModifiedByIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.OwnerIDn <> OLD.OwnerIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.OwnerIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF v_TableHistoryOld IS NULL THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',NEW.DateCreated); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.DateTimeStamp <> OLD.DateTimeStamp THEN SET v_TableHistory := concat(v_TableHistory,'†',OLD.DateTimeStamp); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.TzNameIDn <> OLD.TzNameIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.TzNameIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.TzOffset <> OLD.TzOffset THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.TzOffset); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF v_TableHistoryOld IS NULL THEN
			SET NEW.TableHistory := v_TableHistory;
		ELSE
			SET NEW.TableHistory := concat(v_TableHistory,'‡',v_TableHistory);
		END IF;
	END IF;
END$$
DELIMITER ;

-- Lista los datos de la tabla
SELECT * FROM `articlesdb`.`ArtDataElementComments_Tbl`;
