-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the ArtDataElements_Tbl table
/*Contains the diccionary of all articles data elements of the Microservice.
The rest of the tables only have the IDNum. To determine what a code means, you should consult this table.
In order for the same IDName word to have different meanings depending on its use, it is defined for a Scope, BusinessUnit and Language.
To respect all the rules the unique value must be the combination of: Name/Scope/BusinessUnit/Language.
The key for each record:
  ID		--> is the uniqueidentifier auto generated.
  IDNum	--> is the autoincrement number auto generated.
The unique Key is the union of:
  IDName     		-> is the readable code by the user.
  ScopeIDn     		-> the Name must be unique for the application Scope, usually a Table.
  BusinessUnitIDn 	-> the Name must be unique for the BusinessUnit.
  LanguageIDn 		-> the Name must be unique for Language. This dictionary has a default language defined.
Important: when you create the element/object in this table, this element does not exits for the software. This table is like a dictionary.
      Only exist when you create the code in the specific table.
  Example: the pampa article is created in the dictionary, but it does not exist until it is created in the Articles table.
Modification Rules:
  You can change the Name if there is a spelling error. Example you have an spelling error in a invoce and must be invoice.
  Warning: If I change the code that represents the word Invoice and it is an afip receipt. And I put food, everywhere the code is, food will start to appear.
  If you want to change the code and it is in many places, the system must generate another code for the new value
  To change this value, it must be done by the administrator. 
  It is best to never change it.
Common Field/Columns for all tables
  The objective of these are to store critical information for the system and the record history.
    StatedIDn 			--> The StatedIDn is the IDNum that define if the record is enable or not.
    CreatedByIDn		--> The CreatedByIDn is the IDNum of the user who created the record.
    LastModifiedByIDn	--> The LastModifiedByIDn is the IDNum of the last user who modified the record.
    OwnerIDn			--> The OwnerIDn is the IDNum of the record owner.
    DateCreated			--> The DateCreated is the record creation datetime UTC.
    DateTimeStamp		--> The DateTimeStamp is the datetime UTC of the last modification.
    TableHistory		-->	The TableHistory contain then change history of each column.
Comments:
  In each microservice and database, you have one DataElements_Tbl. It work as a specific dictionary for it.
  Example:
    In the System Microservice you have the meaning of all databases tables, columns, stored procedures, views, java entities, classes, etc.
    In the Person Microservice you have the meaning of all person (legal or natural) whom can interact with the system.
    In the Users Microservice you have the meaning of all person who can enter in the system to work with. 
    In the Articles Microservice you have the meaning of all the articles that the campany can handle, to sell, buy, or have to use. 
Tips:
  The ScopeIDn + BusinessUnitIDn + TableIDn combination can be the Kafka/rabbitMq topic.
*/

-- #########################################################################################################################################################################################
-- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Delete the table ArtDataElements_Tbl if Exits, but first you must to altere the tables that have a referenced foreign key
USE articlesdb;
-- First you must to delete the Foreing Key Constraint;
-- The referenced ArtDataElements_Tbl Tables:
ALTER TABLE `articlesdb`.`SysBaseElementLanguages_Tbl`  DROP FOREIGN KEY `DataElementLanguageIDn_Rel`;
ALTER TABLE `articlesdb`.`SysBaseElementComments_Tbl`  DROP FOREIGN KEY `CommentIDn_Rel`;
ALTER TABLE `articlesdb`.`SysMicroservices_Tbl`  DROP FOREIGN KEY `MicroserviceIDn_Rel`;
ALTER TABLE `articlesdb`.`SysCompanies_Tbl`  DROP FOREIGN KEY `CompanyIDn_Rel`;
ALTER TABLE `articlesdb`.`SysRootElements_Tbl`  DROP FOREIGN KEY `RootElementIDn_Rel`;
ALTER TABLE `articlesdb`.`SysEntities_Tbl`  DROP FOREIGN KEY `EntityIDn_Rel`; 
ALTER TABLE `articlesdb`.`SysEntityFields_Tbl`  DROP FOREIGN KEY `FieldIDn_Rel`;  
ALTER TABLE `articlesdb`.`SysEntityStructures_Tbl`  DROP FOREIGN KEY `FieldIDn_Rel`;  
ALTER TABLE `articlesdb`.`SysEntityStructures_Tbl`  DROP FOREIGN KEY `EntityIDn_Rel`;  
ALTER TABLE `articlesdb`.`SysEntityStructureFieldProperties_Tbl`  DROP FOREIGN KEY `FieldPropertyIDn_Rel`;  
ALTER TABLE `articlesdb`.`SysEntityStructureFieldDefaultValues_Tbl`  DROP FOREIGN KEY `DefaultVersionIDn_Rel`;  

USE articlesdb;
-- After deleted the referenced, you can delete the table
DROP TABLE IF EXISTS `articlesdb`.`ArtDataElements_Tbl`;

CREATE TABLE `ArtDataElements_Tbl` (
	  `IDNum` int NOT NULL AUTO_INCREMENT COMMENT 'The IDNum is the autoincrement number', 
	  `ID` char(38) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The ID is the uniqueidentifier auto generated V4', 
	  `IDName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The IDName is the user-readable code for the selected language.',
	  `IDNameStructureIDn` int NOT NULL COMMENT 'The IDNameStructureIDn is the IDNum of the IDName structure, if the IDName is multivalued, here it refers to the structure.',
	  `ScopeIDn` int NOT NULL COMMENT 'The ScopeIDn is the IdNum of the Scope, the Name must be unique for the scope of application, usually a Table',
	  `BusinessUnitIDn` int NOT NULL COMMENT 'The BusinessUnitIDn is the IdNum of the BusinessUnit to which the IDName is assigned',
	  `LanguageIDn` int NOT NULL COMMENT 'The LanguageIDn is the IdNum of the language in which the Name is defined',
	  `IDCode` int NOT NULL COMMENT 'The IDCode is the unique code of the record for a scope and company.',
	  `DefinitionIDn` int NOT NULL COMMENT 'The DefinitionIDn is the IdNum of the element definition type.',
	  `InformationTypeIDn` int NOT NULL COMMENT 'Then InformationTypeIDn is the IdNum of the type of information that the record represents.',
	  `IDIsUsed` tinyint NOT NULL COMMENT 'The IDIsUsed determines if the registry is used or not.',
	  `StateIDn` smallint NOT NULL COMMENT 'The StatedIDn define if the record is enable or not.',
	  `CreatedByIDn` int NOT NULL COMMENT 'The CreatedByIDn is the IdNum of the user who created the record.',
	  `LastModifiedByIDn` int NOT NULL COMMENT 'The LastModifiedByIDn is the IdNum of the last user who modified the record.',
	  `OwnerIDn` int NOT NULL COMMENT 'The OwnerIDn is the IdNum of the record owner.',
	  `DateCreated` datetime NOT NULL COMMENT 'The DateCreated is the record creation date with UTC.',
	  `DateTimeStamp` timestamp NOT NULL COMMENT 'The DateTimeStamp is the date of the last modification of the record with UTC.',
 	  `TzNameIDn` smallint NOT NULL COMMENT 'The IDNum of the TimeZone',				
	  `TzOffset` smallint NOT NULL COMMENT 'The diferences between ZeroTimeZone and the TimeZone where the record is created or updated.',					
	  `TableHistory` text CHARACTER SET utf8mb4 COLLATE utf8mb4_bin COMMENT 'The TableHistory contain then change history of each column.',
	  PRIMARY KEY `ID_AdePriKey` (`IDNum`) COMMENT 'The sequence ArtDataElements_Tbl_seq generate the nextval',
	  UNIQUE KEY `ID_AdeUnique` (`ID`) /*!80000 INVISIBLE */ COMMENT 'Is the uniqueidentifier.',
	  UNIQUE KEY `IDNum_AdeUnique` (`IDNum`) COMMENT 'The IDNum must be unique.',
	  UNIQUE KEY `IDNameScopeBusUnitLang_AdeUnique` (`IDName`,`ScopeIDn`,`BusinessUnitIDn`,`LanguageIDn`) COMMENT 'A name can be unique for a ScopeId, for a BusinessUnitId, and LanguageId.',
	  UNIQUE KEY `IDCodeIDScopeIDBusUnit_AdeUnique` (`BusinessUnitIDn`,`ScopeIDn`, `IDCode`) COMMENT 'A IDCode must be unique for a ScopeId and for a BusinessUnitId.',
	  KEY `ID_AdeIdx` (`ID`) /*!80000 INVISIBLE */ COMMENT 'The ID alway must be indexed.',
	  KEY `IDNum_AdeIdx` (`IDNum`) /*!80000 INVISIBLE */ COMMENT 'The IDNum must always be indexed.',
	  KEY `IDCode_AdeIdx` (`IDCode`) /*!80000 INVISIBLE */ COMMENT 'The IDCode must be indexed, because it works like IDNum.',
	  KEY `IDBusUnitScop_AdeIdx` (`IDIsUsed` ASC, `BusinessUnitIDn` ASC, `ScopeIDn`ASC) COMMENT 'To optimize the search of Business Tables.'
) ENGINE=InnoDB 
	AUTO_INCREMENT=0 
	DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin 
	COMMENT='Contains the diccionary of all articles data elements of the Microservice.
The rest of the tables only have the IDNum. To determine what a code means, you should consult this table.
In order for the same IDName word to have different meanings depending on its use, it is defined for a Scope, BusinessUnit and Language.
To respect all the rules the unique value must be the combination of: Name/Scope/BusinessUnit/Language.
The key for each record:
  ID		--> is the uniqueidentifier auto generated.
  IDNum	--> is the autoincrement number auto generated.
The unique Key is the union of:
  IDName     		-> is the readable code by the user.
  ScopeIDn     		-> the Name must be unique for the application Scope, usually a Table.
  BusinessUnitIDn 	-> the Name must be unique for the BusinessUnit.
  LanguageIDn 		-> the Name must be unique for Language. This dictionary has a default language defined.
Important: when you create the element/object in this table, this element does not exits for the software. This table is like a dictionary.
      Only exist when you create the code in the specific table.
  Example: the pampa article is created in the dictionary, but it does not exist until it is created in the Articles table.
Modification Rules:
  You can change the Name if there is a spelling error. Example you have an spelling error in a invoce and must be invoice.
  Warning: If I change the code that represents the word Invoice and it is an afip receipt. And I put food, everywhere the code is, food will start to appear.
  If you want to change the code and it is in many places, the system must generate another code for the new value
  To change this value, it must be done by the administrator. 
  It is best to never change it.
Common Field/Columns for all tables
  The objective of these are to store critical information for the system and the record history.
    StatedIDn 			--> The StatedIDn is the IDNum that define if the record is enable or not.
    CreatedByIDn		--> The CreatedByIDn is the IDNum of the user who created the record.
    LastModifiedByIDn	--> The LastModifiedByIDn is the IDNum of the last user who modified the record.
    OwnerIDn			--> The OwnerIDn is the IDNum of the record owner.
    DateCreated			--> The DateCreated is the record creation datetime UTC.
    DateTimeStamp		--> The DateTimeStamp is the datetime UTC of the last modification.
    TableHistory		-->	The TableHistory contain then change history of each column.
Comments:
  In each microservice and database, you have one DataElements_Tbl. It work as a specific dictionary for it.
  Example:
    In the System Microservice you have the meaning of all databases tables, columns, stored procedures, views, java entities, classes, etc.
    In the Person Microservice you have the meaning of all person (legal or natural) whom can interact with the system.
    In the Users Microservice you have the meaning of all person who can enter in the system to work with. 
    In the Articles Microservice you have the meaning of all the articles that the campany can handle, to sell, buy, or have to use. 
Tips:
  The ScopeIDn + BusinessUnitIDn + TableIDn combination can be the Kafka/rabbitMq topic.';

-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Insert - ArtDataElements_Tbl
USE articlesdb;
DROP TRIGGER IF EXISTS `articlesdb`.`ArtDataElementsBeforeInsert_Trg`;
DELIMITER $$
USE `articlesdb`$$
-- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `ArtDataElementsBeforeInsert_Trg` BEFORE INSERT ON `ArtDataElements_Tbl` FOR EACH ROW BEGIN
	-- In the case, which the request do not give this value, MySql created it.
	-- Set the ID uniqueidentifier, IDCode, DateCreated and DateTimeStamp
	IF new.ID IS NULL OR new.ID = '' THEN
		SET new.ID = uuid();				-- Set the UniqueIdentifier Value
	END IF;
    IF new.IDCode IS NULL OR new.IDCode = 0 OR new.IDCode = '' THEN
		SET new.IDCode = (SELECT ifnull(MAX(IDCode),0) + 1 FROM `articlesdb`.`ArtDataElements_Tbl` WHERE BusinessUnitIDn = new.BusinessUnitIDn AND ScopeIDn = new.ScopeIDn);
        -- Assign the numeric auto-incremental IDCode for this ScopeIDn and BusinessUnitIDn, because this number must be unique.
	END IF;
	SET new.DateCreated = ifnull(new.DateCreated,CURRENT_TIMESTAMP);
	SET new.DateTimeStamp = ifnull(new.DateTimeStamp,CURRENT_TIMESTAMP);
END$$
DELIMITER ;

-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Update - ArtDataElements_Tbl
-- en caso que desde Java no pasen la informacion de estos campos,
-- establece el valor del DateTimeStamp, TableHistory creando el historico de cada registro
USE articlesdb;
DROP TRIGGER IF EXISTS `articlesdb`.`ArtDataElementsBeforeUpdate_Trg`;
DELIMITER $$
USE `articlesdb`$$
-- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `ArtDataElementsBeforeUpdate_Trg` BEFORE UPDATE ON `ArtDataElements_Tbl` FOR EACH ROW BEGIN
	DECLARE v_TableHistory text;
	DECLARE v_TableHistoryOld text;
	SET new.DateTimeStamp = ifnull(new.DateTimeStamp,CURRENT_TIMESTAMP);
    IF new.TableHistory = 'SetNull' THEN
		SET new.TableHistory = null;
    ELSEIF new.TableHistory = 'SetOff' THEN
		SET new.TableHistory = old.TableHistory;
    ELSE
		-- When the (New) value is equal the (Old), you set an empty update, because the value is steal in the record.
		-- When the (New) value is diferent with the (Old), you set the old value in the update. The new value is in the record.
		SET v_TableHistoryOld := old.TableHistory;
		SET v_TableHistory = '';
		-- IDNum, this value never changes.
		-- ID, this value never changes.
		IF NEW.IDName <> OLD.IDName THEN SET v_TableHistory := OLD.IDName; ELSE SET v_TableHistory := '†'; END IF;
		IF NEW.IDNameStructureIDn <> OLD.IDNameStructureIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.IDNameStructureIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.ScopeIDn <> OLD.ScopeIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.ScopeIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.BusinessUnitIDn <> OLD.BusinessUnitIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.BusinessUnitIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.LanguageIDn <> OLD.LanguageIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.LanguageIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.IDCode <> OLD.IDCode THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.IDCode); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.DefinitionIDn <> OLD.DefinitionIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.DefinitionIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.InformationTypeIDn <> OLD.InformationTypeIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.InformationTypeIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.IDIsUsed <> OLD.IDIsUsed THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.IDIsUsed); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.StateIDn <> OLD.StateIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.StateIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.CreatedByIDn <> OLD.CreatedByIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.CreatedByIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.LastModifiedByIDn <> OLD.LastModifiedByIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.LastModifiedByIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.OwnerIDn <> OLD.OwnerIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.OwnerIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF v_TableHistoryOld IS NULL THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',NEW.DateCreated); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.DateTimeStamp <> OLD.DateTimeStamp THEN SET v_TableHistory := concat(v_TableHistory,'†',OLD.DateTimeStamp); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.TzNameIDn <> OLD.TzNameIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.TzNameIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.TzOffset <> OLD.TzOffset THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.TzOffset); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF v_TableHistoryOld IS NULL THEN
			SET NEW.TableHistory := v_TableHistory;
		ELSE
			SET NEW.TableHistory := concat(v_TableHistory,'‡',v_TableHistory);
		END IF;
	END IF;
END$$
DELIMITER ;

-- Lista los datos de la tabla
SELECT * FROM `articlesdb`.`ArtDataElements_Tbl`;
