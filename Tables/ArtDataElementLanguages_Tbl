-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the ArtDataElementLanguages_Tbl table
/*Contains the meaning of the diccionary in another languages than the default.
In this table you have to comply with the same rules as the ArtDataElements_Tbl.
Important Clarification: the values IdNum, ScopeIDn, GroupIDn = are always equal to the ApplTDataElement table. 
                         These columns are put in this table only to ensure integrity and that there are no duplicates.
The key for each record:
    ID		--> is the uniqueidentifier auto generated.
    IDNum	--> is the autoincrement number auto generated.
The unique Key is the union of:
    -- This three values are defined by the user.
    BaseElementLanguageIDn	--> the IdNum of the element that has another languages meaning. It is created in the ArtDataElements_Tbl.
    NameID     		-> is the readable code by the user.
    LanguageIDn 	-> the LanguagesIDn must be diferent from the default language.
    -- This two values are set by the system automaticaly, and are the same as the SysBaseElement_Tbl. For do that use the IdNum.
    ScopeIDn     	-> the Name must be unique for the application Scope, usually a Table.
    GroupIDn			-> the Name must be unique for the Group.
Kafka/RabbitMQ:
  The ScopeIDn + GroupIDn + TableIDn combination can be the topic.
Common Field/Columns for all tables
    The objective of these are to store critical information for the system and the record history.
        StatedIDn 			--> The StatedIDn is the IDNum that define if the record is enable or not.
        CreatedByIDn		--> The CreatedByIDn is the IDNum of the user who created the record.
        LastModifiedByIDn	--> The LastModifiedByIDn is the IDNum of the last user who modified the record.
        OwnerIDn			--> The OwnerIDn is the IDNum of the record owner.
        DateCreated			--> The DateCreated is the record creation datetime UTC.
        DateTimeStamp		--> The DateTimeStamp is the datetime UTC of the last modification.
        TableHistory		-->	The TableHistory contain then change history of each column.*/

-- #########################################################################################################################################################################################
-- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Delete the table ArtDataElementLanguages_Tbl if Exits, but first you must to altere the tables that have a referenced foreign key
USE articlesdb;
-- First you must to delete the Foreing Key Constraint;
-- The referenced ArtDataElementLanguages_Tbl Tables:
-- ALTER TABLE `articlesdb`.`SysMicroservices_Tbl`  DROP FOREIGN KEY `MicroserviceIDn_Rel`;

-- After deleted the referenced, you can delete the table
DROP TABLE IF EXISTS `articlesdb`.`ArtDataElementLanguages_Tbl`;

CREATE TABLE `ArtDataElementLanguages_Tbl` (
	  `IDNum` int NOT NULL AUTO_INCREMENT COMMENT 'The IDNum is the autoincrement number', 
	  `ID` char(38) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The ID is the uniqueidentifier auto generated V4', 
	  `DataElementLanguageIDn` int NOT NULL COMMENT 'The DataElementLanguageIDn is the IDNum of the IDName from the ArtDataElement, which has the IDName in other languages than default.',
     `IDName` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The IDName is the user-readable code for the selected language.',
	  `IDNameStructureIDn` int NOT NULL COMMENT 'The IDNameStructureIDn is the IDNum of the IDName structure, if the IDName is multivalued, here it refers to the structure.',
	  `ScopeIDn` int NOT NULL COMMENT 'The ScopeIDn is the IdNum of the Scope, the Name must be unique for the scope of application, usually a Table. It inherited from ArtDataElements_Tbl.',
	  `GroupIDn` int NOT NULL COMMENT 'The GroupIDn is the IdNum of the Group to which the IDName is assigned. It inherited from ArtDataElements_Tbl.',
	  `LanguageIDn` int NOT NULL COMMENT 'The LanguageIDn is the IdNum of the language in which the Name is defined. It must be different from the default.',
	  `StateIDn` smallint NOT NULL COMMENT 'The StatedIDn define if the record is enable or not.',
	  `CreatedByIDn` int NOT NULL COMMENT 'The CreatedByIDn is the IdNum of the user who created the record.',
	  `LastModifiedByIDn` int NOT NULL COMMENT 'The LastModifiedByIDn is the IdNum of the last user who modified the record.',
	  `OwnerIDn` int NOT NULL COMMENT 'The OwnerIDn is the IdNum of the record owner.',
	  `DateCreated` datetime NOT NULL COMMENT 'The DateCreated is the record creation date with UTC.',
	  `DateTimeStamp` timestamp NOT NULL COMMENT 'The DateTimeStamp is the date of the last modification of the record with UTC.',
 	  `TzNameIDn` smallint NOT NULL COMMENT 'The IDNum of the TimeZone',				
	  `TzOffset` smallint NOT NULL COMMENT 'The diferences between ZeroTimeZone and the TimeZone where the record is created or updated.',					
	  `TableHistory` text CHARACTER SET utf8mb4 COLLATE utf8mb4_bin COMMENT 'The TableHistory contain then change history of each column.',
	  PRIMARY KEY `ID_AdlPriKey` (`IDNum`) COMMENT 'The sequence ArtDataElementLanguages_Tbl_seq generate the nextval',
	  UNIQUE KEY `ID_AdUnique` (`ID`) /*!80000 INVISIBLE */ COMMENT 'Is the uniqueidentifier.',
	  UNIQUE KEY `IDNum_AdUnique` (`IDNum`) COMMENT 'The IDNum must be unique.',
	  UNIQUE KEY `IDNameScopeGroupLang_AdUnique` (`IDName`,`ScopeIDn`,`GroupIDn`,`LanguageIDn`) COMMENT 'A name can be unique for a ScopeId, for a GroupId, and LanguageId.',
	  KEY `ID_AdIdx` (`ID`) /*!80000 INVISIBLE */ COMMENT 'The ID alway must be indexed.',
	  KEY `IDNum_AdIdx` (`IDNum`) /*!80000 INVISIBLE */ COMMENT 'The IDNum must always be indexed.',
	  CONSTRAINT `DataElementLanguageIDn_AdRel` FOREIGN KEY (`DataElementLanguageIDn`) REFERENCES `articlesdb`.`ArtDataElements_Tbl` (`IDNum`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB 
	AUTO_INCREMENT=0 
	DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin 
	COMMENT='Contains the meaning of the diccionary in another languages than the default.
In this table you have to comply with the same rules as the ArtDataElements_Tbl.
Important Clarification: the values IdNum, ScopeIDn, GroupIDn = are always equal to the ApplTDataElement table. 
                         These columns are put in this table only to ensure integrity and that there are no duplicates.
The key for each record:
    ID		--> is the uniqueidentifier auto generated.
    IDNum	--> is the autoincrement number auto generated.
The unique Key is the union of:
    -- This three values are defined by the user.
    BaseElementLanguageIDn	--> the IdNum of the element that has another languages meaning. It is created in the ArtDataElements_Tbl.
    NameID     		-> is the readable code by the user.
    LanguageIDn 	-> the LanguagesIDn must be diferent from the default language.
    -- This two values are set by the system automaticaly, and are the same as the SysBaseElement_Tbl. For do that use the IdNum.
    ScopeIDn     	-> the Name must be unique for the application Scope, usually a Table.
    GroupIDn			-> the Name must be unique for the Group.
Kafka/RabbitMQ:
  The ScopeIDn + GroupIDn + TableIDn combination can be the topic.
Common Field/Columns for all tables
    The objective of these are to store critical information for the system and the record history.
        StatedIDn 			--> The StatedIDn is the IDNum that define if the record is enable or not.
        CreatedByIDn		--> The CreatedByIDn is the IDNum of the user who created the record.
        LastModifiedByIDn	--> The LastModifiedByIDn is the IDNum of the last user who modified the record.
        OwnerIDn			--> The OwnerIDn is the IDNum of the record owner.
        DateCreated			--> The DateCreated is the record creation datetime UTC.
        DateTimeStamp		--> The DateTimeStamp is the datetime UTC of the last modification.
        TableHistory		-->	The TableHistory contain then change history of each column.';

-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Insert - ArtDataElementLanguages_Tbl
USE articlesdb;
DROP TRIGGER IF EXISTS `articlesdb`.`ArtDataElementLanguagesBeforeInsert_Trg`;
DELIMITER $$
USE `articlesdb`$$
-- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `ArtDataElementLanguagesBeforeInsert_Trg` BEFORE INSERT ON `ArtDataElementLanguages_Tbl` FOR EACH ROW BEGIN
	-- In the case, which the request do not give this value, MySql created it.
	-- Set the ID uniqueidentifier, IDCode, DateCreated and DateTimeStamp
	IF new.ID IS NULL OR new.ID = '' THEN
		SET new.ID = uuid();				-- Set the UniqueIdentifier Value
	END IF;
	SET new.ScopeIDn = (SELECT ScopeIDn FROM `articlesdb`.`ArtDataElements_Tbl` WHERE IDNum = new.DataElementLanguageIDn LIMIT 1);
	SET new.GroupIDn = (SELECT GroupIDn FROM `articlesdb`.`ArtDataElements_Tbl` WHERE IDNum = new.DataElementLanguageIDn LIMIT 1);
	SET new.DateCreated = ifnull(new.DateCreated,CURRENT_TIMESTAMP);
	SET new.DateTimeStamp = ifnull(new.DateTimeStamp,CURRENT_TIMESTAMP);
END$$
DELIMITER ;

-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Update - ArtDataElementLanguages_Tbl
-- en caso que desde Java no pasen la informacion de estos campos,
-- establece el valor del DateTimeStamp, TableHistory creando el historico de cada registro
USE articlesdb;
DROP TRIGGER IF EXISTS `articlesdb`.`ArtDataElementLanguagesBeforeUpdate_Trg`;
DELIMITER $$
USE `articlesdb`$$
-- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `ArtDataElementLanguagesBeforeUpdate_Trg` BEFORE UPDATE ON `ArtDataElementLanguages_Tbl` FOR EACH ROW BEGIN
	DECLARE v_TableHistory text;
	DECLARE v_TableHistoryOld text;
	SET new.DateTimeStamp = ifnull(new.DateTimeStamp,CURRENT_TIMESTAMP);
    IF new.TableHistory = 'SetNull' THEN
		SET new.TableHistory = null;
    ELSEIF new.TableHistory = 'SetOff' THEN
		SET new.TableHistory = old.TableHistory;
    ELSE
		-- When the (New) value is equal the (Old), you set an empty update, because the value is steal in the record.
		-- When the (New) value is diferent with the (Old), you set the old value in the update. The new value is in the record.
		SET v_TableHistoryOld := old.TableHistory;
		SET v_TableHistory = '';
		-- IDNum, this value never changes.
		-- ID, this value never changes.
		IF NEW.DataElementLanguageIDn <> OLD.DataElementLanguageIDn THEN SET v_TableHistory := OLD.IDName; ELSE SET v_TableHistory := '†'; END IF;
		IF NEW.IDName <> OLD.IDName THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.IDName); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.IDNameStructureIDn <> OLD.IDNameStructureIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.IDNameStructureIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.ScopeIDn <> OLD.ScopeIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.ScopeIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.GroupIDn <> OLD.GroupIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.GroupIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.LanguageIDn <> OLD.LanguageIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.LanguageIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.StateIDn <> OLD.StateIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.StateIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.CreatedByIDn <> OLD.CreatedByIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.CreatedByIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.LastModifiedByIDn <> OLD.LastModifiedByIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.LastModifiedByIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.OwnerIDn <> OLD.OwnerIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.OwnerIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF v_TableHistoryOld IS NULL THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',NEW.DateCreated); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.DateTimeStamp <> OLD.DateTimeStamp THEN SET v_TableHistory := concat(v_TableHistory,'†',OLD.DateTimeStamp); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.TzNameIDn <> OLD.TzNameIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.TzNameIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.TzOffset <> OLD.TzOffset THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.TzOffset); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF v_TableHistoryOld IS NULL THEN
			SET NEW.TableHistory := v_TableHistory;
		ELSE
			SET NEW.TableHistory := concat(v_TableHistory,'‡',v_TableHistory);
		END IF;
	END IF;
END$$
DELIMITER ;

-- Lista los datos de la tabla
SELECT * FROM `articlesdb`.`ArtDataElementLanguages_Tbl`;
