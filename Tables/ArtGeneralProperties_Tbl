-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the ArtGeneralProperties_Tbl table
/*Contains the Articles general properties.
Before create an Article you must create a general specification of that article.
  Concept: the articles properties are set by 
      1.- the general properties
      2.- the individual properties, this override the general properties. 
			When an article (record) is created, the relationship is assigned in the ArtGeneralIDn field.
The key for each record:
  ID		--> is the uniqueidentifier auto generated.
  IDNum	--> is the autoincrement number auto generated.
The unique Key is the union of:
  ArtGeneralPropertyIDn		-> the ArtGeneralPropertyIDn must be unique for the Group.
  GroupIDn 	-> the ArtGeneralPropertyIDn must be unique for the Group.
Kafka/RabbitMQ:
  The GroupIDn + TableIDn combination can be the topic.  
Common Field/Columns for all tables
  The objective of these are to store critical information for the system and the record history.
    StatedIDn 			--> The StatedIDn is the IDNum that define if the record is enable or not.
    CreatedByIDn		--> The CreatedByIDn is the IDNum of the user who created the record.
    LastModifiedByIDn	--> The LastModifiedByIDn is the IDNum of the last user who modified the record.
    OwnerIDn			--> The OwnerIDn is the IDNum of the record owner.
    DateCreated			--> The DateCreated is the record creation datetime UTC.
    DateTimeStamp		--> The DateTimeStamp is the datetime UTC of the last modification.
    TableHistory		-->	The TableHistory contain then change history of each column.			
*/

-- #########################################################################################################################################################################################
-- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Delete the table ArtGeneralProperties_Tbl if Exits, but first you must to altere the tables that have a referenced foreign key
USE articlesdb;
-- First you must to delete the Foreing Key Constraint;
-- The referenced ArtGeneralProperties_Tbl Tables:
-- ALTER TABLE `articlesdb`.`SysMicroservices_Tbl`  DROP FOREIGN KEY `MicroserviceIDn_Rel`;

-- After deleted the referenced, you can delete the table
DROP TABLE IF EXISTS `articlesdb`.`ArtGeneralProperties_Tbl`;

CREATE TABLE `ArtGeneralProperties_Tbl` (
	  `IDNum` int NOT NULL AUTO_INCREMENT COMMENT 'The IDNum is the autoincrement number', 
	  `ID` char(38) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'The ID is the uniqueidentifier auto generated V4', 
		`ArtGeneralPropertyIDn` integer NOT NULL COMMENT 'The ArtGeneralPropertyIDn is the IDNum of the general articles properties. Link with the diccionary table - ArtTDataElement.',
    `GroupIDn` integer NOT NULL COMMENT 'The GroupIDn is the Group that the general articles belong.',
    `ScalesUse` tinyint NOT NULL COMMENT 'The ScalesUse enables the use of scales for the item.',
    `StockEnable` tinyint NOT NULL COMMENT'The StockEnable enables if the article item is carried in stock.',
    `PartitionsUse` tinyint NOT NULL COMMENT'The PartitionsUse enables the use of partitions by article.',
    `PartitionsAutomaticNumbering` tinyint NOT NULL COMMENT 'The PartitionsAutomaticNumbering enables the use of autonumeric partitions number.',
    `PartitionsAutoDownloadByAge` tinyint NOT NULL COMMENT 'The PartitionsAutoDownloadByAge enable automatic download of partitions matching by seniority.',
    `SeriesUse` tinyint NOT NULL COMMENT 'The SeriesUse enable the use of series by the article.',
    `SeriesUseMandatory` tinyint NOT NULL COMMENT 'The SeriesUseMandatory establishes as mandatory the use of the series.',
    `SeriesUseReentry` tinyint NOT NULL COMMENT 'The SeriesUseReentry supports re-entry of series, activates the check for duplicate series (current or already sold). Avoid duplicate serie number.',
    `SeriesUseValidate` tinyint NOT NULL COMMENT 'The SeriesUseValidate, validates that the serial number exists in the system. When an expense voucher is loaded, it validates that the available serial numbers exist.',
    `StateIDn` smallint NOT NULL COMMENT 'The StatedIDn define if the record is enable or not.',
	  `CreatedByIDn` int NOT NULL COMMENT 'The CreatedByIDn is the IdNum of the user who created the record.',
	  `LastModifiedByIDn` int NOT NULL COMMENT 'The LastModifiedByIDn is the IdNum of the last user who modified the record.',
	  `OwnerIDn` int NOT NULL COMMENT 'The OwnerIDn is the IdNum of the record owner.',
	  `DateCreated` datetime NOT NULL COMMENT 'The DateCreated is the record creation date with UTC.',
	  `DateTimeStamp` timestamp NOT NULL COMMENT 'The DateTimeStamp is the date of the last modification of the record with UTC.',
 	  `TzNameIDn` smallint NOT NULL COMMENT 'The IDNum of the TimeZone',				
	  `TzOffset` smallint NOT NULL COMMENT 'The diferences between ZeroTimeZone and the TimeZone where the record is created or updated.',					
	  `TableHistory` text CHARACTER SET utf8mb4 COLLATE utf8mb4_bin COMMENT 'The TableHistory contain then change history of each column.',
	  PRIMARY KEY `ID_AgpPriKey` (`IDNum`) COMMENT 'The sequence ArtGeneralProperties_Tbl_seq generate the nextval',
	  UNIQUE KEY `ID_AgpUnique` (`ID`) /*!80000 INVISIBLE */ COMMENT 'Is the uniqueidentifier.',
    UNIQUE KEY `IDNum_AgpUnique` (`IDNum`) COMMENT 'The IDNum must be unique.',
		UNIQUE KEY `ArtGenProGroup_AgpUnique` (`ArtGeneralPropertyIDn`, `GroupIDn`) COMMENT 'The ArtGeneralPropertyIDn must be unique for a GroupIDn.',
	  KEY `ID_AgpIdx` (`ID`) /*!80000 INVISIBLE */ COMMENT 'The ID alway must be indexed.',
	  KEY `IDNum_AgpIdx` (`IDNum`) /*!80000 INVISIBLE */ COMMENT 'The IDNum must always be indexed.',
		KEY `ArtGenProGroup_AgpIdx` (`ArtGeneralPropertyIDn` ASC, `GroupIDn` ASC) VISIBLE COMMENT 'To optimize the search of one element for a Group Tables.',
	  CONSTRAINT `ArtGeneralPropertyIDn_AgpRel` FOREIGN KEY (`ArtGeneralPropertyIDn`) REFERENCES `articlesdb`.`ArtDataElements_Tbl` (`IDNum`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB 
	AUTO_INCREMENT=0 
	DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin 
	COMMENT='Contains the Articles general properties.
Before create an Article you must create a general specification of that article.
  Concept: the articles properties are set by 
      1.- the general properties
      2.- the individual properties, this override the general properties. 
			When an article (record) is created, the relationship is assigned in the ArtGeneralIDn field.
The key for each record:
  ID		--> is the uniqueidentifier auto generated.
  IDNum	--> is the autoincrement number auto generated.
The unique Key is the union of:
  ArtGeneralPropertyIDn		-> the ArtGeneralPropertyIDn must be unique for the Group.
  GroupIDn 	-> the ArtGeneralPropertyIDn must be unique for the Group.
Kafka/RabbitMQ:
  The GroupIDn + TableIDn combination can be the topic.  
Common Field/Columns for all tables
  The objective of these are to store critical information for the system and the record history.
    StatedIDn 			--> The StatedIDn is the IDNum that define if the record is enable or not.
    CreatedByIDn		--> The CreatedByIDn is the IDNum of the user who created the record.
    LastModifiedByIDn	--> The LastModifiedByIDn is the IDNum of the last user who modified the record.
    OwnerIDn			--> The OwnerIDn is the IDNum of the record owner.
    DateCreated			--> The DateCreated is the record creation datetime UTC.
    DateTimeStamp		--> The DateTimeStamp is the datetime UTC of the last modification.
    TableHistory		-->	The TableHistory contain then change history of each column.';

-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Insert - ArtGeneralProperties_Tbl
USE articlesdb;
DROP TRIGGER IF EXISTS `articlesdb`.`ArtGeneralPropertiesBeforeInsert_Trg`;
DELIMITER $$
USE `articlesdb`$$
-- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `ArtGeneralPropertiesBeforeInsert_Trg` BEFORE INSERT ON `ArtGeneralProperties_Tbl` FOR EACH ROW BEGIN
	-- In the case, which the request do not give this value, MySql created it.
	-- Set the ID uniqueidentifier, IDCode, DateCreated and DateTimeStamp
	IF new.ID IS NULL OR new.ID = '' THEN
		SET new.ID = uuid();				-- Set the UniqueIdentifier Value
	END IF;
	SET new.DateCreated = ifnull(new.DateCreated,CURRENT_TIMESTAMP);
	SET new.DateTimeStamp = ifnull(new.DateTimeStamp,CURRENT_TIMESTAMP);
END$$
DELIMITER ;

-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the Trigger Before Update - ArtGeneralProperties_Tbl
-- en caso que desde Java no pasen la informacion de estos campos,
-- establece el valor del DateTimeStamp, TableHistory creando el historico de cada registro
USE articlesdb;
DROP TRIGGER IF EXISTS `articlesdb`.`ArtGeneralPropertiesBeforeUpdate_Trg`;
DELIMITER $$
USE `articlesdb`$$
-- DEFINER=`root`@`localhost` -- When create Trigger in localhost, must add Definer between CREATE and TRIGGER key word.
CREATE TRIGGER `ArtGeneralPropertiesBeforeUpdate_Trg` BEFORE UPDATE ON `ArtGeneralProperties_Tbl` FOR EACH ROW BEGIN
	DECLARE v_TableHistory text;
	DECLARE v_TableHistoryOld text;
	SET new.DateTimeStamp = ifnull(new.DateTimeStamp,CURRENT_TIMESTAMP);
    IF new.TableHistory = 'SetNull' THEN
		SET new.TableHistory = null;
    ELSEIF new.TableHistory = 'SetOff' THEN
		SET new.TableHistory = old.TableHistory;
    ELSE
		-- When the (New) value is equal the (Old), you set an empty update, because the value is steal in the record.
		-- When the (New) value is diferent with the (Old), you set the old value in the update. The new value is in the record.
		SET v_TableHistoryOld := old.TableHistory;
		SET v_TableHistory = '';
		-- IDNum, this value never changes.
		-- ID, this value never changes.
		IF NEW.ArtGeneralPropertyIDn <> OLD.ArtGeneralPropertyIDn THEN SET v_TableHistory := OLD.ArtGeneralPropertyIDn; ELSE SET v_TableHistory := '†'; END IF;
    IF NEW.GroupIDn <> OLD.GroupIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.GroupIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.ScalesUse <> OLD.ScalesUse THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.ScalesUse); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.StockEnable <> OLD.StockEnable THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.StockEnable); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.PartitionsUse <> OLD.PartitionsUse THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.PartitionsUse); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.PartitionsAutomaticNumbering <> OLD.PartitionsAutomaticNumbering THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.PartitionsAutomaticNumbering); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.PartitionsAutoDownloadByAge <> OLD.PartitionsAutoDownloadByAge THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.PartitionsAutoDownloadByAge); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.SeriesUse <> OLD.SeriesUse THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.SeriesUse); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.SeriesUseMandatory <> OLD.SeriesUseMandatory THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.SeriesUseMandatory); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.SeriesUseReentry <> OLD.SeriesUseReentry THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.SeriesUseReentry); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
    IF NEW.SeriesUseValidate <> OLD.SeriesUseValidate THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.SeriesUseValidate); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.StateIDn <> OLD.StateIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.StateIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.CreatedByIDn <> OLD.CreatedByIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.CreatedByIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.LastModifiedByIDn <> OLD.LastModifiedByIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.LastModifiedByIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.OwnerIDn <> OLD.OwnerIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.OwnerIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF v_TableHistoryOld IS NULL THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',NEW.DateCreated); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.DateTimeStamp <> OLD.DateTimeStamp THEN SET v_TableHistory := concat(v_TableHistory,'†',OLD.DateTimeStamp); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.TzNameIDn <> OLD.TzNameIDn THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.TzNameIDn); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW.TzOffset <> OLD.TzOffset THEN SET v_TableHistory := CONCAT(v_TableHistory,'†',OLD.TzOffset); ELSE SET v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF v_TableHistoryOld IS NULL THEN
			SET NEW.TableHistory := v_TableHistory;
		ELSE
			SET NEW.TableHistory := concat(v_TableHistory,'‡',v_TableHistory);
		END IF;
	END IF;
END$$
DELIMITER ;

-- Lista los datos de la tabla
SELECT * FROM `articlesdb`.`ArtGeneralProperties_Tbl`;
